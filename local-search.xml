<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2024技能兴鲁初赛Crypto方向全WP</title>
    <link href="/2024/11/30/2024%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81Crypto%E6%96%B9%E5%90%91%E5%85%A8WP/"/>
    <url>/2024/11/30/2024%E6%8A%80%E8%83%BD%E5%85%B4%E9%B2%81Crypto%E6%96%B9%E5%90%91%E5%85%A8WP/</url>
    
    <content type="html"><![CDATA[<h1 id="一：这个n是什么"><a href="#一：这个n是什么" class="headerlink" title="一：这个n是什么"></a>一：这个n是什么</h1><h2 id="（一）：题目类型"><a href="#（一）：题目类型" class="headerlink" title="（一）：题目类型"></a>（一）：题目类型</h2><p>单素数rsa</p><h2 id="（二）：题目"><a href="#（二）：题目" class="headerlink" title="（二）：题目"></a>（二）：题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">```python<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br>flag=<span class="hljs-string">b&#x27;flag&#123;*****&#125;&#x27;</span><br>n = getPrime(<span class="hljs-number">512</span>)<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>,e)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 8933016269936480000862818854167103060818897630877296849617565608941135857587981508180109226893079199009026771203383925904359975559898823884694597177943063</span><br><span class="hljs-string">c= 3494778279034833271177511486081657062146108287828871903331377762169652050745726842967000128721288602283097735514036611604352065358545239634188401298060321</span><br><span class="hljs-string">e= 65537</span><br></code></pre></td></tr></table></figure><h2 id="（三）：解题思路"><a href="#（三）：解题思路" class="headerlink" title="（三）：解题思路"></a>（三）：解题思路</h2><p>单素数RSA</p><h2 id="（四）：解题代码"><a href="#（四）：解题代码" class="headerlink" title="（四）：解题代码"></a>（四）：解题代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>n= <span class="hljs-number">8933016269936480000862818854167103060818897630877296849617565608941135857587981508180109226893079199009026771203383925904359975559898823884694597177943063</span><br>c= <span class="hljs-number">3494778279034833271177511486081657062146108287828871903331377762169652050745726842967000128721288602283097735514036611604352065358545239634188401298060321</span><br>e= <span class="hljs-number">65537</span><br>phi=n-<span class="hljs-number">1</span><br>d=inverse(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m).decode())<br></code></pre></td></tr></table></figure><h1 id="二：e咋这么大"><a href="#二：e咋这么大" class="headerlink" title="二：e咋这么大"></a>二：e咋这么大</h1><h2 id="（一）：题目类型-1"><a href="#（一）：题目类型-1" class="headerlink" title="（一）：题目类型"></a>（一）：题目类型</h2><p>维纳攻击</p><h2 id="（二）：题目-1"><a href="#（二）：题目-1" class="headerlink" title="（二）：题目"></a>（二）：题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-comment"># 生成随机素数</span><br>p = libnum.generate_prime(<span class="hljs-number">512</span>)<br>q = libnum.generate_prime(<span class="hljs-number">512</span>)<br>m = <span class="hljs-string">&quot;xjusec&#123;fake_flag&#125;&quot;</span><br><span class="hljs-comment"># 字符串转数字</span><br>m = libnum.s2n(m)<br>n = p * q<br>phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br><span class="hljs-comment"># 计算d</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    nbits = <span class="hljs-number">1024</span><br>    d = random.getrandbits(nbits // <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> libnum.gcd(d, phi_n) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">36</span> * <span class="hljs-built_in">pow</span>(d, <span class="hljs-number">4</span>) &lt; n:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-comment"># 计算e</span><br>e = libnum.invmod(d, phi_n)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e=&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c=&quot;</span>, c)  <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 84759586321367337887780437584685106579085074965112521484344049646437894046082602854634633148582472968603463743438343484823980031138129314219504095698178622254320271681999860332610325223454341809051178943622128336098505461927391262429524484667385743868165220569109483345920566095908674582795138002280172054901</span><br><span class="hljs-string">e= 66288875417761391735336508179031781461458397094560594352005873830730369271057472593019640848396507956317226914042734460741730619378424621998873462267141804992425548349906362051377176848446970670269625959428657063813053998204432987906270288972553991694084764963674828882833521361595114819645054140098694014033</span><br><span class="hljs-string">c= 55793266382808668383390028264320313476480462639251420282032620664514843264012556336628829925417590165117761221508016231889956332919056931672687301567732943226049335108323978513326330771724845198936862017830947882511017614192627520685625693006743832632002358777752259725470367349656504917200798619000646027705</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="（三）：解题思路-1"><a href="#（三）：解题思路-1" class="headerlink" title="（三）：解题思路"></a>（三）：解题思路</h2><p>常规维纳攻击</p><h2 id="（四）：解题代码-1"><a href="#（四）：解题代码-1" class="headerlink" title="（四）：解题代码"></a>（四）：解题代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">continuedFra</span>(<span class="hljs-params">x, y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算连分数</span><br><span class="hljs-string">    :param x: 分子</span><br><span class="hljs-string">    :param y: 分母</span><br><span class="hljs-string">    :return: 连分数列表</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = []<br>    <span class="hljs-keyword">while</span> y:<br>        cf.append(x // y)<br>        x, y = y, x % y<br>    <span class="hljs-keyword">return</span> cf<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gradualFra</span>(<span class="hljs-params">cf</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算传入列表最后的渐进分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表最后的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    numerator = <span class="hljs-number">0</span><br>    denominator = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> cf[::-<span class="hljs-number">1</span>]:<br>        <span class="hljs-comment"># 这里的渐进分数分子分母要分开</span><br>        numerator, denominator = denominator, x * denominator + numerator<br>    <span class="hljs-keyword">return</span> numerator, denominator<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_pq</span>(<span class="hljs-params">a, b, c</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;使用韦达定理解出pq，x^2−(p+q)∗x+pq=0</span><br><span class="hljs-string">    :param a:x^2的系数</span><br><span class="hljs-string">    :param b:x的系数</span><br><span class="hljs-string">    :param c:pq</span><br><span class="hljs-string">    :return:p，q</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    par = gmpy2.isqrt(b * b - <span class="hljs-number">4</span> * a * c)<br>    <span class="hljs-keyword">return</span> (-b + par) // (<span class="hljs-number">2</span> * a), (-b - par) // (<span class="hljs-number">2</span> * a)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getGradualFra</span>(<span class="hljs-params">cf</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;计算列表所有的渐近分数</span><br><span class="hljs-string">    :param cf: 连分数列表</span><br><span class="hljs-string">    :return: 该列表所有的渐近分数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    gf = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(cf) + <span class="hljs-number">1</span>):<br>        gf.append(gradualFra(cf[:i]))<br>    <span class="hljs-keyword">return</span> gf<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">e, n</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    :param e:</span><br><span class="hljs-string">    :param n:</span><br><span class="hljs-string">    :return: 私钥d</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    cf = continuedFra(e, n)<br>    gf = getGradualFra(cf)<br>    <span class="hljs-keyword">for</span> d, k <span class="hljs-keyword">in</span> gf:<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span>: <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (e * d - <span class="hljs-number">1</span>) % k != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        phi = (e * d - <span class="hljs-number">1</span>) // k<br>        p, q = solve_pq(<span class="hljs-number">1</span>, n - phi + <span class="hljs-number">1</span>, n)<br>        <span class="hljs-keyword">if</span> p * q == n:<br>            <span class="hljs-keyword">return</span> d<br>n= <span class="hljs-number">84759586321367337887780437584685106579085074965112521484344049646437894046082602854634633148582472968603463743438343484823980031138129314219504095698178622254320271681999860332610325223454341809051178943622128336098505461927391262429524484667385743868165220569109483345920566095908674582795138002280172054901</span><br>e= <span class="hljs-number">66288875417761391735336508179031781461458397094560594352005873830730369271057472593019640848396507956317226914042734460741730619378424621998873462267141804992425548349906362051377176848446970670269625959428657063813053998204432987906270288972553991694084764963674828882833521361595114819645054140098694014033</span><br>c= <span class="hljs-number">55793266382808668383390028264320313476480462639251420282032620664514843264012556336628829925417590165117761221508016231889956332919056931672687301567732943226049335108323978513326330771724845198936862017830947882511017614192627520685625693006743832632002358777752259725470367349656504917200798619000646027705</span><br><br>d=wienerAttack(e, n)<br>m=<span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m).decode())<br><br></code></pre></td></tr></table></figure><h1 id="三：ez-rsa"><a href="#三：ez-rsa" class="headerlink" title="三：ez_rsa"></a>三：ez_rsa</h1><h2 id="一-：题目类型"><a href="#一-：题目类型" class="headerlink" title="(一)：题目类型"></a>(一)：题目类型</h2><p>[[P1：已知pq]]</p><h2 id="二-：题目"><a href="#二-：题目" class="headerlink" title="(二)：题目"></a>(二)：题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><br>p=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>q=libnum.generate_prime(<span class="hljs-number">1024</span>)<br>e=<span class="hljs-number">65537</span><br>m=<span class="hljs-string">&quot;flag&#123;xxxx&#125;&quot;</span><br>m=libnum.s2n(m)<br>n=p*q<br>phi_n=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=libnum.invmod(e,phi_n)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p=&quot;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;q=&quot;</span>,q)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;e=&quot;</span>,e)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p= 142746377986265588203209230608614141486992129456713308782651620565639716483042704148029354162076590370818112090453266601765342503099931507118348740371992875352802970518126456858906932187200583596528119833923802821087594481687681655766838418022679403912877047458442485930708989264802383271676438430051477419073</span><br><span class="hljs-string">q= 101556540759993341132401841934321855672207223737490583713852133044065857859294513627531508680505435020802615808427112439278953868339029525177790315321339940570430502294620060278709533980502929100142925694557791453738196989957889876386914879754138712981207794515117907563426835202358740651616786664770511197491</span><br><span class="hljs-string">e= 65537</span><br><span class="hljs-string">c= 2611937276563784099571420314571389591567448750803793958762014602973047518746085506592099244737625830903336692357104933828317944187060779272934599968616752518554261802011669038583836429797400505009978723437313062289959873127204553824981485673453311158945977895389921853001526741382428068045040739837015887345762607146159386674676190190751753826672466106089054696312109426929622505950864639198171842997066483989838750844330068119086429713235512330019438990633015670552379970353941911418304624746490992764510781206851621852353964095594842028856883435745655968386202086207268861651484600402486261505175288889546106455212</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="三-：解题思路"><a href="#三-：解题思路" class="headerlink" title="(三)：解题思路"></a>(三)：解题思路</h2><p>常规RSA</p><h2 id="四-：解题代码"><a href="#四-：解题代码" class="headerlink" title="(四)：解题代码"></a>(四)：解题代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>  <br><br>p= <span class="hljs-number">142746377986265588203209230608614141486992129456713308782651620565639716483042704148029354162076590370818112090453266601765342503099931507118348740371992875352802970518126456858906932187200583596528119833923802821087594481687681655766838418022679403912877047458442485930708989264802383271676438430051477419073</span><br>q= <span class="hljs-number">101556540759993341132401841934321855672207223737490583713852133044065857859294513627531508680505435020802615808427112439278953868339029525177790315321339940570430502294620060278709533980502929100142925694557791453738196989957889876386914879754138712981207794515117907563426835202358740651616786664770511197491</span><br>e= <span class="hljs-number">65537</span><br>c= <span class="hljs-number">2611937276563784099571420314571389591567448750803793958762014602973047518746085506592099244737625830903336692357104933828317944187060779272934599968616752518554261802011669038583836429797400505009978723437313062289959873127204553824981485673453311158945977895389921853001526741382428068045040739837015887345762607146159386674676190190751753826672466106089054696312109426929622505950864639198171842997066483989838750844330068119086429713235512330019438990633015670552379970353941911418304624746490992764510781206851621852353964095594842028856883435745655968386202086207268861651484600402486261505175288889546106455212</span><br><br>n = p*q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br>phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=inverse(e,phi)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h1 id="四：ez-rsa2"><a href="#四：ez-rsa2" class="headerlink" title="四：ez_rsa2"></a>四：ez_rsa2</h1><h2 id="一-：题目类型-1"><a href="#一-：题目类型-1" class="headerlink" title="(一)：题目类型"></a>(一)：题目类型</h2><p>相邻素数,费马分解</p><h2 id="二）：题目"><a href="#二）：题目" class="headerlink" title="(二）：题目"></a>(二）：题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><br>p=libnum.generate_prime(<span class="hljs-number">1024</span>)<br><br>q=gmpy2.next_prime(p)<br><br>e=<span class="hljs-number">65537</span><br>m=<span class="hljs-string">&quot;xjusec&#123;fake_flag&#125;&quot;</span><br>m=libnum.s2n(m)<br>n=p*q<br>phi_n=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d=libnum.invmod(e,phi_n)<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n=&quot;</span>,n)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;e=&quot;</span>,e)<br><span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;c=&quot;</span>,c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n= 12872311844796335551074772926373442157584207393868495851604773915402573049905020786883935496452654953182028422239889519866798473860330700762324494226757523208430629280963673244580900642802613477278622107025994098955715529159364503684996390392870614975557242855553151220373699874977684957792556070396045575585134086316066211567151217961741210892593858681987222776416960335601990219681817959094253930024878375582517316502091321736391906696168378868287901493175466496043572325201642173497838277126933218828358564443772474000457448713435536967737757982044937175519657867854547932884151120179002864724013116653807902692637</span><br><span class="hljs-string">e= 65537</span><br><span class="hljs-string">c= 9132582410761466193897393860943366992045516908322696055882421527052610500121891193136852494077311298577641886692181159438065660446662754105849323312928620489217571402954575229902509545202861138414515107447794944344598744230530961197099220658114404726362543877191904637729863906963841100167814779606979014982383413687565793725075500441872139157678937789220295680934581953982434770689821811167304885893774840050051446190132541313031028882692122429222790715135491595434135834488277926897887734937555589905152137558556293999414724378085536870794501987540152168612980967420475826314881377426621602225280131752264612573606</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="三-：解题思路-1"><a href="#三-：解题思路-1" class="headerlink" title="(三)：解题思路"></a>(三)：解题思路</h2><p>相邻素数，采用费马分解</p><h2 id="四-：解题代码-1"><a href="#四-：解题代码-1" class="headerlink" title="(四)：解题代码"></a>(四)：解题代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isqrt</span>(<span class="hljs-params">n</span>):<br>  x = n<br>  y = (x + n // x) // <span class="hljs-number">2</span><br>  <span class="hljs-keyword">while</span> y &lt; x:<br>    x = y<br>    y = (x + n // x) // <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> x<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fermat</span>(<span class="hljs-params">n, verbose=<span class="hljs-literal">True</span></span>):<br>    a = isqrt(n) <span class="hljs-comment"># int(ceil(n**0.5))</span><br>    b2 = a*a - n<br>    b = isqrt(n) <span class="hljs-comment"># int(b2**0.5)</span><br>    count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> b*b != b2:<br>        <span class="hljs-comment"># if verbose:</span><br>        <span class="hljs-comment">#     print(&#x27;Trying: a=%s b2=%s b=%s&#x27; % (a, b2, b))</span><br>        a = a + <span class="hljs-number">1</span><br>        b2 = a*a - n<br>        b = isqrt(b2) <span class="hljs-comment"># int(b2**0.5)</span><br>        count += <span class="hljs-number">1</span><br>    p=a+b<br>    q=a-b<br>    <span class="hljs-keyword">assert</span> n == p * q<br>    <span class="hljs-comment"># print(&#x27;a=&#x27;,a)</span><br>    <span class="hljs-comment"># print(&#x27;b=&#x27;,b)</span><br>    <span class="hljs-comment"># print(&#x27;p=&#x27;,p)</span><br>    <span class="hljs-comment"># print(&#x27;q=&#x27;,q)</span><br>    <span class="hljs-comment"># print(&#x27;pq=&#x27;,p*q)</span><br>    <span class="hljs-keyword">return</span> p, q<br><br>n= <span class="hljs-number">12872311844796335551074772926373442157584207393868495851604773915402573049905020786883935496452654953182028422239889519866798473860330700762324494226757523208430629280963673244580900642802613477278622107025994098955715529159364503684996390392870614975557242855553151220373699874977684957792556070396045575585134086316066211567151217961741210892593858681987222776416960335601990219681817959094253930024878375582517316502091321736391906696168378868287901493175466496043572325201642173497838277126933218828358564443772474000457448713435536967737757982044937175519657867854547932884151120179002864724013116653807902692637</span><br>e= <span class="hljs-number">65537</span><br>c= <span class="hljs-number">9132582410761466193897393860943366992045516908322696055882421527052610500121891193136852494077311298577641886692181159438065660446662754105849323312928620489217571402954575229902509545202861138414515107447794944344598744230530961197099220658114404726362543877191904637729863906963841100167814779606979014982383413687565793725075500441872139157678937789220295680934581953982434770689821811167304885893774840050051446190132541313031028882692122429222790715135491595434135834488277926897887734937555589905152137558556293999414724378085536870794501987540152168612980967420475826314881377426621602225280131752264612573606</span><br><span class="hljs-comment">#费马分解,</span><br>n1=fermat(n)<br>p=n1[<span class="hljs-number">0</span>]<br>q=n1[<span class="hljs-number">1</span>]<br>phi_n=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><span class="hljs-comment">#求逆元</span><br>d=libnum.invmod(e,phi_n)<br>m=<span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-built_in">print</span>(libnum.n2s(<span class="hljs-built_in">int</span>(m)).decode())<br><br></code></pre></td></tr></table></figure><h1 id="五：ez-xor"><a href="#五：ez-xor" class="headerlink" title="五：ez_xor"></a>五：ez_xor</h1><h2 id="一-：题目类型-2"><a href="#一-：题目类型-2" class="headerlink" title="(一)：题目类型"></a>(一)：题目类型</h2><p>异或</p><h2 id="二-：题目-1"><a href="#二-：题目-1" class="headerlink" title="(二)：题目"></a>(二)：题目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><br>flag=<span class="hljs-string">b&#x27;flag&#123;fake_flag&#125;&#x27;</span><br>p,q = getPrime(<span class="hljs-number">512</span>),getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(p^q)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">124121742433386095705311225695801760362852852566217717331768507632130669748480134091236138576336684757533864152825068590228777378517261386860515005283892370100986166713704470275586380471252125943853415677035145762096542879779198642539963272946667834252038809677113959263289484086409931495568491754725301103953</span><br><span class="hljs-string">65537</span><br><span class="hljs-string">43735162879827286229041206732231027010433261805209070920241032330698105490405671088538157815203632904738206904380082811045471515979643030627163910951967080132493759826955510429816541085240501175763879277080363166599603845608309063371602415631819736080068450237442573200534146133073417442448913282020534751072</span><br><span class="hljs-string">1965221422190883011303162401417101213884905181846738618707577668311011858223021486645058050128444366251132733357715120119284320467696315527008827310087312&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="三-：解题思路-2"><a href="#三-：解题思路-2" class="headerlink" title="(三)：解题思路"></a>(三)：解题思路</h2><p>已知n&#x3D;p*q,p ^ q,两个数异或，从低位开始爆破：<br>当异或结果为1的时候，pq对应位置上只有两种情况：1.0或0.1<br>当异或结果为0时，pq对应位置上也只有两种情况：11或00<br>至此我们可以解出pq，之后常规RSA做法。</p><h2 id="四-：解题代码-2"><a href="#四-：解题代码-2" class="headerlink" title="(四)：解题代码"></a>(四)：解题代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><br>n = <span class="hljs-number">124121742433386095705311225695801760362852852566217717331768507632130669748480134091236138576336684757533864152825068590228777378517261386860515005283892370100986166713704470275586380471252125943853415677035145762096542879779198642539963272946667834252038809677113959263289484086409931495568491754725301103953</span><br>x = <span class="hljs-number">1965221422190883011303162401417101213884905181846738618707577668311011858223021486645058050128444366251132733357715120119284320467696315527008827310087312</span><br><br>p_list, q_list = [<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>]<br>cur_mod = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">720</span>):<br>    cur_mod *= <span class="hljs-number">2</span><br>    nxt_ps, nxt_qs = [], []<br>    <span class="hljs-keyword">for</span> pl, ql <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(p_list, q_list):<br>        <span class="hljs-keyword">for</span> ph, qh <span class="hljs-keyword">in</span> itertools.product([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], repeat=<span class="hljs-number">2</span>):<br>            pp, qq = ph*(cur_mod // <span class="hljs-number">2</span>) + pl, qh*(cur_mod // <span class="hljs-number">2</span>) + ql<br>            <span class="hljs-keyword">if</span> ((pp * qq % cur_mod == n % cur_mod) <span class="hljs-keyword">and</span> ((pp ^ qq) == x % cur_mod)):<br>                nxt_ps.append(pp)<br>                nxt_qs.append(qq)<br>    <br>    p_list, q_list = nxt_ps, nxt_qs<br><br><span class="hljs-keyword">for</span> p, q <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(p_list, q_list):<br>    <span class="hljs-keyword">if</span> p * q == n <span class="hljs-keyword">and</span> p * q - n == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> (p ^ q) - x == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q =&#x27;</span>,q)<br><br><br></code></pre></td></tr></table></figure><hr><p>合并一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> inverse<br><br><br>n_target = <span class="hljs-number">124121742433386095705311225695801760362852852566217717331768507632130669748480134091236138576336684757533864152825068590228777378517261386860515005283892370100986166713704470275586380471252125943853415677035145762096542879779198642539963272946667834252038809677113959263289484086409931495568491754725301103953</span><br>x_target = <span class="hljs-number">1965221422190883011303162401417101213884905181846738618707577668311011858223021486645058050128444366251132733357715120119284320467696315527008827310087312</span><br><br><br>p_list, q_list = [<span class="hljs-number">0</span>], [<span class="hljs-number">0</span>]<br>cur_mod = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">720</span>):<br>    cur_mod *= <span class="hljs-number">2</span><br>    nxt_ps, nxt_qs = [], []<br>    <span class="hljs-keyword">for</span> pl, ql <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(p_list, q_list):<br>        <span class="hljs-keyword">for</span> ph, qh <span class="hljs-keyword">in</span> itertools.product([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], repeat=<span class="hljs-number">2</span>):<br>            pp, qq = ph * (cur_mod // <span class="hljs-number">2</span>) + pl, qh * (cur_mod // <span class="hljs-number">2</span>) + ql<br>            <span class="hljs-keyword">if</span> (pp * qq % cur_mod == n_target % cur_mod) <span class="hljs-keyword">and</span> ((pp ^ qq) == x_target % cur_mod):<br>                nxt_ps.append(pp)<br>                nxt_qs.append(qq)<br>    <br>    p_list, q_list = nxt_ps, nxt_qs<br><br><br><span class="hljs-keyword">for</span> p, q <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(p_list, q_list):<br>    <span class="hljs-keyword">if</span> p * q == n_target <span class="hljs-keyword">and</span> (p ^ q) == x_target:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Found p and q:&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p =&#x27;</span>, p)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;q =&#x27;</span>, q)<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;No valid p and q found&quot;</span>)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">43735162879827286229041206732231027010433261805209070920241032330698105490405671088538157815203632904738206904380082811045471515979643030627163910951967080132493759826955510429816541085240501175763879277080363166599603845608309063371602415631819736080068450237442573200534146133073417442448913282020534751072</span><br><br>n = p * q<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = inverse(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Decrypted message:&quot;</span>, long_to_bytes(m))<br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>-WP -Crypto -CTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
